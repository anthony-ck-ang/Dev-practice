package com.anthonyang.ds.collections;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.IntBinaryOperator;
import java.util.function.IntUnaryOperator;

public class ArrayDemo {

	private static void arraysSequential() {
		String[] stringArray = new String[] { "aaa", "bbb" };
		/*
		 * asList() -> most commonly used 
		 * Converting the list for
		 * iteration purpose or to check its contents (no adding or removing is
		 * required), 
 better in performance (not creating an extra
		 * unnecessary ArrayList in the middle and also eliminating the extra
		 * processing required to copy the contents from the fixed List to the
		 * new ArrayList):
		 * 
		 * List list = Arrays.asList(arr);
		 */
		List<String> strings = Arrays.asList(stringArray); // fixed-size

		System.out.println("strings: " + strings);

		strings.set(0, "kkk");
		System.out.println("Updated Array: " + Arrays.toString(stringArray));

		// Creating modifiable ArrayList from an Array
		strings = new ArrayList(Arrays.asList(stringArray));

		// Showing varargs
		strings = Arrays.asList("ccc", "ddd");
		System.out.println("size: " + strings.size());

		List<String> fixedList = Arrays.asList(new String[3]); // fixed List
		System.out.println("fl size: " + fixedList.size());

		// arrays are not auto-boxeable
		// List<Integer> fixedList2 = Arrays.asList(new int[2]);
		List<Integer> fixedList3 = Arrays.asList(new Integer[2]);

		System.out.println("fl3 size: " + fixedList3.size());

		List<int[]> fixedList4 = Arrays.asList(new int[] { 1, 2, 3 });
		System.out.println("fl4 size: " + fixedList4.size());

		// Sorting: void sort(Object[]) - Uses Merge-sort with natural ordering
		// Partially sorted array: far fewer than nlog(n) comparisons
		// Almost sorted array: approx. n comparisons, where n is array size
		Arrays.sort(stringArray);
		System.out.println(Arrays.toString(stringArray));
		// Additional Comments: Well-suited for merging 2 or more sorted arrays
		// Concatenate the arrays & sort the resulting array!!

		// Sorting: void sort(int[]) - Uses quick sort
		int[] iArray = { 23, 4, 59 };
		Arrays.sort(iArray);
		System.out.println("Sorted iArray: " + Arrays.toString(iArray));

		// void sort(T[] a, Comparator<? super T> c)

		// Binary Search: int binarySearch(int[], int);
		// returns index if element found
		// otherwise returns -(insertion point) - 1 eg. 5 -> -(1) - 1 = -2
		// input array must be sorted. Otherwise, behavior is undefined
		System.out.println("index returned by binary search: " + Arrays.binarySearch(new int[] { 4, 23, 59 }, 5));

		int[] newArray = Arrays.copyOf(iArray, 6);// this is cleaner and easier
		// newArray:
		// [4,
		// 23,
		// 59,
		// 0, 0,
		// 0]
		System.out.println("newArray: " + Arrays.toString(newArray));

		int[] newArray1 = new int[6];
		// void java.lang.System.arraycopy(Object src, int srcPos, Object dest,
		// int destPos, int length)
		System.arraycopy(iArray, 0, newArray1, 3, iArray.length);
		System.out.println("newArray1: " + Arrays.toString(newArray1));// newArray1:
																		// [0,
																		// 0, 4,
																		// 23,
																		// 59,
																		// 0]

		Arrays.fill(newArray, 13);
		System.out.println("Fill with 13: " + Arrays.toString(newArray)); // Fill
																			// with
																			// 13:
																			// [13,
																			// 13,
																			// 13,
																			// 13,
																			// 13,
																			// 13]

		System.out.println("Equals? " + Arrays.equals(iArray, newArray)); // false

		// Arrays.deepEquals(Object[], Object[]);
		// Returns true if arrays are deeply equal to one another.
		// Appropriate for nested arrays
		int[][][] deepArray1 = { { { 1, 2, 3 }, { 4, 5, 6 } }, { { 1, 2, 3 }, { 4, 5, 6 } } };
		int[][][] deepArray2 = { { { 1, 2, 3 }, { 4, 5, 6 } }, { { 1, 2, 3 }, { 4, 5, 6 } } };
		// int[][] deepArray1 = {{1, 2, 3}};
		// int[][] deepArray2 = {{1, 2, 3}};
		// int[] deepArray1 = {1, 2, 3}; // Covariance: Does not work as int[]
		// is not a subtype of Object[] eg. Integer is a subtype of Object
		// int[] deepArray2 = {1, 2, 3}; // int[] is an object != Array of
		// Objects
		System.out.println("Deep Array Equals? " + Arrays.deepEquals(deepArray1, deepArray2));

		Object[] objArray = new int[][][] { { { 1, 2, 3 }, { 2, 3, 4 } } }; // an
																			// array
																			// of
																			// int[][]
																			// (2
																			// dimension
																			// array)
		int[][] ia = (int[][]) objArray[0];
		System.out.println(ia[1][2]);

		// https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html
	}

	private static void arraysParallel() {

		// For large arrays on multi-core. Min size atleast 1 >> 13 = 8192
		int[] iArray = { 23, 4, 59 };
		Arrays.parallelSort(iArray);
		System.out.println("iArray parallel sort: " + Arrays.toString(iArray));

		/*
		 * Cumulates, in parallel, each element of the given array in place,
		 * using the supplied function. For example if the array initially holds
		 * [2, 1, 0, 3] and the operation performs addition, then upon return
		 * the array holds [2, 3, 3, 6]. Parallel prefix computation is usually
		 * more efficient than sequential loops for large arrays.
		 */

		// TODO change to lambda or method ref
		// IntBinaryOperatorImpl IntBinaryOperatorImpl = new
		// IntBinaryOperatorImpl();
		// Arrays.parallelPrefix(iArray, IntBinaryOperatorImpl);
		Arrays.parallelPrefix(iArray, (left, right) -> {
			return left + right;
		});

		System.out.println("Parallel Prefix: " + Arrays.toString(iArray));

		IntUnaryOperatorImpl intUnaryOperatorImpl = new IntUnaryOperatorImpl();
		intUnaryOperatorImpl.setArray(iArray);
		Arrays.parallelSetAll(iArray, intUnaryOperatorImpl);
		System.out.println("Parallel Set All: " + Arrays.toString(iArray));

	}

	public static void main(String[] args) {
		// arraysSequential();
		arraysParallel();
	}
}

// Implements functional interface
// class IntBinaryOperatorImpl implements IntBinaryOperator {
// @Override
// public int applyAsInt(int left, int right) {
// return left + right;
// }

class IntUnaryOperatorImpl implements IntUnaryOperator {
	int[] iArray;

	public void setArray(int[] iArray) {
		this.iArray = iArray;
	}

	@Override
	public int applyAsInt(int i) {
		if (iArray != null) {
			return iArray[i] + 5; // instead of for loop, apply a fix rate/amt
									// to
		} else {
			return i;
		}
	}

}

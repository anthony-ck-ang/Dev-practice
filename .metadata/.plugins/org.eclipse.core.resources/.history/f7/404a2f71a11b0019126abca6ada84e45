package com.anthonyang.concurrency;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class JEFW1DemoExecutor {

	/*
	 * volatile -> thread safe ->used by multiple threads at the same time
	 * without any problem.
	 */
	private static ExecutorService executor = null;
	private static volatile Future<TestOne> taskOneResults = null;
	private static volatile Future<TestTwo> taskTwoResults = null;

	public static void main(String[] args) {
		executor = Executors.newFixedThreadPool(2);
		while (true) {
			try {
				checkTasks();
				Thread.sleep(1000);
			} catch (Exception e) {
				System.err.println("Caught exception: " + e.getMessage());
			}
		}
	}

	private static void checkTasks() throws Exception {
		if (taskOneResults == null || taskOneResults.isDone() || taskOneResults.isCancelled()) {
			//Submits a Runnable task for execution and returns a Future representing that task
			taskOneResults = (Future<TestOne>) executor.submit(new TestOne());
		}

		if (taskTwoResults == null || taskTwoResults.isDone() || taskTwoResults.isCancelled()) {
			taskTwoResults = (Future<TestTwo>) executor.submit(new TestTwo());
		}
	}
}

class TestOne implements Runnable {
	public void run() {
		while (true) {
			System.out.println("Executing task one");
			try {
				Thread.sleep(1000);
			} catch (Throwable e) {
				e.printStackTrace();
			}
		}

	}
}

class TestTwo implements Runnable {
	public void run() {
		while (true) {
			System.out.println("Executing task two");
			try {
				Thread.sleep(1000);
			} catch (Throwable e) {
				e.printStackTrace();
			}
		}
	}
}

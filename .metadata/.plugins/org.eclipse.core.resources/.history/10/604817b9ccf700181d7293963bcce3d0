package com.anthonyang.ds.hashtable;

public class HashTable {

	String [] hashArray;
	int arraySize; //no of slots in entire array
	int size = 0; //counter for number of elements in hash table
	
	public HashTable(int noOfSlots) {
		
		if(isPrime(noOfSlots)){
			hashArray = new String[noOfSlots];
			arraySize = noOfSlots;
		}else{
			int newPrimeNo = getNextPrime(noOfSlots);
			hashArray = new String[newPrimeNo];
			arraySize = newPrimeNo;
			
			System.out.println("Hash table size given " + noOfSlots + " is not a prime");
			System.out.println("Hash table size changed: " + newPrimeNo);
		}
	}
	
	//instantiation of hashArray must be a prime
	
	private boolean isPrime(int anyNumber){
		for (int i = 2; i*i <= anyNumber; i++) {
			if(anyNumber % i == 0){
				return false;
			}
		}
		return true;
	}
	
	private int getNextPrime(int minNumber){
		for (int i = minNumber; true; i++) {
			if(isPrime(minNumber)){
				return i;
			}
		}
	}
	
	//Hash Functions
	
	//First method -> give ideal position to insert element
	private int hashFunc1(String word){
		int hashValue = word.hashCode();
		hashValue = hashValue % arraySize; // % to reduce hashvalue
	}
	
	//Second method -> step size to the next open slot/address
	
}
